declare_texture_samplers
{
	// greyscale
    texture2d_r( input_rgb, 0 );
    texture2d_w( output_l, 1 );
    
    // gi
    texture3d_w( volume_gi, 0 );
    texture2d_array_r( shadow_map, 1 );
	texture2d_array_r( shadow_map_depth, 2 );
};

cbuffer per_pass : register(b0)
{   
    float4 output_buffer_dimension; //zw are unused
};

void cs_main_greyscale(uint3 gid : SV_DispatchThreadID) 
{
    float4 col = read_texture(input_rgb, gid.xy);
    float  grey = dot(col.rgb, float3(0.2126, 0.7152, 0.0722));
    write_texture(output_l, float4(grey, grey, grey, 1.0), gid.xy);
}

cbuffer gi_info : register(b1)
{
	float4x4 	inv_mat;
	float4 		scene_size;
	float4		volume_size;
	float4		shadow_map_size;
};

void cs_main_volume_gi(uint2 gid : SV_DispatchThreadID)
{	
	float4 sm = read_texture_array( shadow_map_depth, gid.xy, 0 );
	float4 col = read_texture_array( shadow_map, gid.xy, 0 );
	
	// projected coord
	float3 ndc = float3(gid.x/shadow_map_size.x, 1.0 - (gid.y/shadow_map_size.y), sm.r) * 2.0 - 1.0;
	float4 p = float4(ndc.xyz, 1.0);
	
	float4 up = mul(p, inv_mat); 
	up /= up.w;
		
	// convert world to texture coord
	float3 ws = scene_size.xyz * 0.5;
	float3 ts = volume_size.xyz;
	float3 ns = (up.xyz / ws) * 0.5 + 0.5;
	uint3 tp = uint3(ns * ts);

	// skip first texel to avoid bleeding / wraparound
	for(int i = 0; i < 3; ++i)
		if(tp[i] == volume_size[i]-1 || tp[i] == 0)
			return;
	
	write_texture(volume_gi, float4(col.x, col.y, col.z, 1.0), tp);
}

void cs_main_clear_volume_gi(uint3 gid : SV_DispatchThreadID)
{
	write_texture(volume_gi, float4(0.0, 0.0, 0.0, 0.0), gid);
}
pmfx:
{    
    "greyscale":
    {
        "supported_platforms":
        {
            "hlsl": ["5_0"],
            "metal": ["all"],
            "glsl": ["450"]
        },
        
        "cs" : "cs_main_greyscale",
        "threads": [16, 16, 1]
    },
    
	"clear_volume_gi":
    {
        "supported_platforms":
        {
            "hlsl": ["5_0"],
            "metal": ["all"],
            "glsl": ["450"]
        },
        
        "cs" : "cs_main_clear_volume_gi",
        "threads": [10, 10, 10]
    },
    
	"volume_gi":
    {
        "supported_platforms":
        {
            "hlsl": ["5_0"],
            "metal": ["all"],
            "glsl": ["450"]
        },
        
        "cs" : "cs_main_volume_gi",
        "threads": [16, 16, 1]
    }
}



