// generic render pass buffers
cbuffer per_pass_view : register(b0)
{
    float4x4 vp_matrix;
    float4x4 view_matrix;
    float4x4 vp_matrix_inverse;
    float4x4 view_matrix_inverse;
    float4 camera_view_pos; // w = near
    float4 camera_view_dir; // w = far
};

cbuffer per_draw_call : register(b1)
{
    float4x4 world_matrix;    
    float4   user_data;     //x = id, y = time
    float4   user_data2;    //instance colour
    float4x4 world_matrix_inv_transpose;
};

// lighting buffers
struct light_data
{
    float4 pos_radius; // radius = spot length and point radius
    float4 dir_cutoff; // spot light dir and cos cutoff
    float4 colour;
    float4 data;       // x = spot light falloff, yzw reserved.
};

cbuffer per_pass_lights : register(b3)
{
    float4      light_info;
    light_data  lights[100];
};

struct distance_field_shadow
{
    float4x4     world_matrix;
    float4x4     world_matrix_inv;
};

cbuffer per_pass_shadow : register(b4)
{
    float4x4 shadow_matrix[100];
};

cbuffer per_pass_shadow_distance_fields : register(b5)
{
    distance_field_shadow sdf_shadow; 
};

struct area_light_data
{
    float4 corners[4];
    float4 colour; // w may contain index of texture array slice
};

cbuffer per_pass_area_lights : register(b6)
{
    float4           area_light_info;
    area_light_data  area_lights[10];
};

cbuffer cbuffer_single_light : register(b10)
{
    light_data single_light;
};

cbuffer cbuffer_gi_volume : register(b11)
{
	float4 gi_scene_size;
	float4 gi_volume_size;
};

// registers b7, b8 and b9 are reserved and autogenerated from material constants defined in a pmfx technique block


